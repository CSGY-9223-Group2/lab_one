name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Docker Setup Script
      run: ./docker_setup.sh

    - name: Run Trivy Vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: 'pastebin_app'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        scanners: 'vuln,secret,misconfig'

    - name: Wait for Flask Application to Start
      run: |
        echo "Waiting for Flask App to be ready..."
        sleep 5

    - name: Test POST Request to /register End Point
      run: |
        echo "Testing Flask Application is running via POST req to /register ..."
        response=$(curl -X POST http://localhost:5000/register \
          -H "Content-Type: application/json" \
          -d '{"username": "test_user", "password": "test_password"}' \
          -o /dev/null -s -w "%{http_code}")

        if [[ "$response" -ne 201 ]] ; then
          echo "Flask app may not be running correctly. Endpoint returned status code $response"
          exit 1
        else
          echo "Flask app /register endpoint returned status code $response"
        fi

    - name: Get Container ID
      run: echo "CONTAINER_ID=$(docker ps -q -f "name=pastebin_container")" >> $GITHUB_ENV

    - name: Show Container ID
      run: echo "Container ID is $CONTAINER_ID"

    - name: Get Test Variables
      run: |
        echo "USER=$(docker exec $CONTAINER_ID id -un)" >> $GITHUB_ENV
        echo "GROUP=$(docker exec $CONTAINER_ID id -gn)" >> $GITHUB_ENV
        echo "UID=$(docker exec $CONTAINER_ID id -u)" >> $GITHUB_ENV
        echo "CAPS=$(docker inspect $CONTAINER_ID --format '{{.HostConfig.CapAdd}}')" >> $GITHUB_ENV
        echo "NONEWPRIV=$(docker inspect $CONTAINER_ID --format '{{.HostConfig.SecurityOpt}}')" >> $GITHUB_ENV
        echo "NETWORK=$(docker inspect $CONTAINER_ID --format '{{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}')" >> $GITHUB_ENV
        echo "READONLY=$(docker inspect $CONTAINER_ID --format '{{.HostConfig.ReadonlyRootfs}}')" >> $GITHUB_ENV

    - name: Checking Username and Groupname
      run: |
        if [ "$USER" != "appuser" ] || [ "$GROUP" != "appgroup" ]; then
          echo "Error: User and Group name are $USER : $GROUP. They should be appuser : appgroup"
          exit 1
        else
          echo "User and Group name are $USER : $GROUP"
        fi

    - name: Check user does not have superuser access
      run: |
        if [ "$uid" -eq 0 ]; then
          echo "Error: Container is running as root."
          exit 1
        else
          echo "User does not have root access"
        fi
